From b316a59f9745e1eb6b41cbc074c93fe10a8b124e Mon Sep 17 00:00:00 2001
From: Hans-Erik Floryd <hans-erik.floryd@rt-labs.com>
Date: Fri, 2 Dec 2016 17:23:03 +0100
Subject: [PATCH] fix

---
 drivers/pci/host/pci-imx6.c | 104 +++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 103 insertions(+), 1 deletion(-)
 mode change 100644 => 100755 drivers/pci/host/pci-imx6.c

diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
old mode 100644
new mode 100755
index 3bff5b6..72ed0b9
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -44,7 +44,7 @@
  * [imx6sx,imx7d platforms]0x8000_0000 ~ 0xBFFF_FFFF
  *
  */
-static u32 ddr_test_region = 0, test_region_size = SZ_2M;
+static u32 ddr_test_region = 0xa30000, test_region_size = SZ_2M;
 
 struct imx6_pcie {
 	u32 			ext_osc;
@@ -865,6 +865,100 @@ static void imx_pcie_regions_setup(struct device *dev)
 	writel(1 << 31, pp->dbi_base + 0x908);
 }
 
+static int imx_pcie_self_io_test (struct device *dev)
+{
+	struct imx6_pcie *imx6_pcie = dev_get_drvdata(dev);
+	struct pcie_port *pp = &imx6_pcie->pp;
+	void *test_reg1, *test_reg2;
+	void __iomem *pcie_arb_base_addr;
+	struct timeval tv1s, tv1e, tv2s, tv2e;
+	u32 tv_count1, tv_count2;
+	int i;
+	int ret;
+
+	/* self io test */
+	test_reg1 = devm_kzalloc(dev,
+		test_region_size, GFP_KERNEL);
+	if (!test_reg1) {
+		pr_err("pcie ep: can't alloc the test reg1.\n");
+		ret = PTR_ERR(test_reg1);
+		return ret;
+	}
+
+	test_reg2 = devm_kzalloc(dev,
+		test_region_size, GFP_KERNEL);
+	if (!test_reg2) {
+		pr_err("pcie ep: can't alloc the test reg2.\n");
+		ret = PTR_ERR(test_reg1);
+		return ret;
+	}
+
+	/*
+	 * FIXME when the ddr_test_region is mapped as cache-able,
+	 * system hang when read the ddr memory content back from rc
+	 * reserved ddr memory after write the ddr_test_region
+	 * content to rc.
+	 */
+	pcie_arb_base_addr = ioremap_nocache(pp->mem_base,
+		test_region_size);
+
+	if (!pcie_arb_base_addr) {
+		pr_err("error with ioremap in ep selftest\n");
+		ret = PTR_ERR(pcie_arb_base_addr);
+		return ret;
+	}
+
+	for (i = 0; i < test_region_size; i = i + 4) {
+		writel(0xE6600D00 + i, test_reg1 + i);
+		writel(0xDEADBEAF, test_reg2 + i);
+	}
+
+	/* PCIe EP start the data transfer after link up */
+	pr_info("pcie ep: Starting data transfer...\n");
+	do_gettimeofday(&tv1s);
+
+	memcpy((unsigned int *)pcie_arb_base_addr,
+	       (unsigned int *)test_reg1,
+	       test_region_size);
+
+	do_gettimeofday(&tv1e);
+
+	do_gettimeofday(&tv2s);
+
+	memcpy((unsigned int *)test_reg2,
+	       (unsigned int *)pcie_arb_base_addr,
+	       test_region_size);
+
+	do_gettimeofday(&tv2e);
+	if (memcmp(test_reg2, test_reg1, test_region_size) == 0) {
+		pr_info("pcie ep: Data transfer is successful.\n");
+	} else {
+		pr_info("pcie ep: Data transfer is failed.\n");
+	} /* end of self io test. */
+
+	tv_count1 = (tv1e.tv_sec - tv1s.tv_sec)
+		* USEC_PER_SEC
+		+ tv1e.tv_usec - tv1s.tv_usec;
+	tv_count2 = (tv2e.tv_sec - tv2s.tv_sec)
+		* USEC_PER_SEC
+		+ tv2e.tv_usec - tv2s.tv_usec;
+
+	pr_info("pcie ep: Data transfer"
+		" tv_count1 %dus,"
+		" tv_count2 %dus.\n",
+		tv_count1, tv_count2);
+	pr_info("pcie ep: Data write speed:%ldMB/s.\n",
+		((test_region_size/1024)
+		 * MSEC_PER_SEC)
+		/(tv_count1));
+	pr_info("pcie ep: Data read speed:%ldMB/s.\n",
+		((test_region_size/1024)
+		 * MSEC_PER_SEC)
+		/(tv_count2));
+
+	return 0;
+}
+
 static ssize_t imx_pcie_memw_info(struct device *dev,
 		struct device_attribute *devattr, char *buf)
 {
@@ -888,11 +982,13 @@ imx_pcie_memw_start(struct device *dev, struct device_attribute *attr,
 			return -1;
 		}
 	} else {
+#if 0
 		if (memw_start < 0x10000000 || memw_start > 0x40000000) {
 			dev_err(dev, "Invalid imx6q sd memory start addr.\n");
 			dev_info(dev, "e.x: echo 0x30000000 > /sys/...");
 			return -1;
 		}
+#endif
 	}
 
 	if (ddr_test_region != memw_start) {
@@ -900,6 +996,8 @@ imx_pcie_memw_start(struct device *dev, struct device_attribute *attr,
 		imx_pcie_regions_setup(dev);
 	}
 
+	imx_pcie_self_io_test (dev);
+
 	return count;
 }
 
@@ -1413,6 +1511,9 @@ static int __init imx6_pcie_probe(struct platform_device *pdev)
 			writel(0xDEADBEAF, test_reg2 + i);
 		}
 
+#if 1
+		pr_info("pcie ep: not starting data transfer...\n");
+#else
 		/* PCIe EP start the data transfer after link up */
 		pr_info("pcie ep: Starting data transfer...\n");
 		do_gettimeofday(&tv1s);
@@ -1453,6 +1554,7 @@ static int __init imx6_pcie_probe(struct platform_device *pdev)
 		} else {
 			pr_info("pcie ep: Data transfer is failed.\n");
 		} /* end of self io test. */
+#endif
 	} else {
 		ret = imx6_add_pcie_port(pp, pdev);
 		if (ret < 0)
-- 
2.7.4

